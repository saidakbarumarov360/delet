from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ChatMemberStatus
import logging
import re

# Bot token va guruh ID‚Äôlari
API_TOKEN = "7833851145:AAEcYEYfCNRrCb2EM6gKkbCc1hvEkdIBkFY"
GROUP_IDS = [-1001754111732, -1002520242281]  # Ikkala guruh ID

# Logging sozlamalari
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# transliterate.py dan olingan lug‚Äòatlar va funksiyalar
LATIN_TO_CYRILLIC = {
    'a': '–∞', 'A': '–ê', 'b': '–±', 'B': '–ë', 'd': '–¥', 'D': '–î', 'e': '–µ', 'E': '–ï',
    'f': '—Ñ', 'F': '–§', 'g': '–≥', 'G': '–ì', 'h': '“≥', 'H': '“≤', 'i': '–∏', 'I': '–ò',
    'j': '–∂', 'J': '–ñ', 'k': '–∫', 'K': '–ö', 'l': '–ª', 'L': '–õ', 'm': '–º', 'M': '–ú',
    'n': '–Ω', 'N': '–ù', 'o': '–æ', 'O': '–û', 'p': '–ø', 'P': '–ü', 'q': '“õ', 'Q': '“ö',
    'r': '—Ä', 'R': '–†', 's': '—Å', 'S': '–°', 't': '—Ç', 'T': '–¢', 'u': '—É', 'U': '–£',
    'v': '–≤', 'V': '–í', 'x': '—Ö', 'X': '–•', 'y': '–π', 'Y': '–ô', 'z': '–∑', 'Z': '–ó',
    ' º': '—ä',
}

CYRILLIC_TO_LATIN = {
    '–∞': 'a', '–ê': 'A', '–±': 'b', '–ë': 'B', '–≤': 'v', '–í': 'V', '–≥': 'g', '–ì': 'G',
    '–¥': 'd', '–î': 'D', '–µ': 'e', '–ï': 'E', '—ë': 'yo', '–Å': 'Yo', '–∂': 'j', '–ñ': 'J',
    '–∑': 'z', '–ó': 'Z', '–∏': 'i', '–ò': 'I', '–π': 'y', '–ô': 'Y', '–∫': 'k', '–ö': 'K',
    '–ª': 'l', '–õ': 'L', '–º': 'm', '–ú': 'M', '–Ω': 'n', '–ù': 'N', '–æ': 'o', '–û': 'O',
    '–ø': 'p', '–ü': 'P', '—Ä': 'r', '–†': 'R', '—Å': 's', '–°': 'S', '—Ç': 't', '–¢': 'T',
    '—É': 'u', '–£': 'U', '—Ñ': 'f', '–§': 'F', '—Ö': 'x', '–•': 'X', '—Ü': 's', '–¶': 'S',
    '—á': 'ch', '–ß': 'Ch', '—à': 'sh', '–®': 'Sh', '—ä': ' º', '—å': '', '–¨': '',
    '—ç': 'e', '–≠': 'E', '—é': 'yu', '–Æ': 'Yu', '—è': 'ya', '–Ø': 'Ya', '—û': 'o ª', '–é': 'O ª',
    '“õ': 'q', '“ö': 'Q', '“ì': 'g ª', '“í': 'G ª', '“≥': 'h', '“≤': 'H',
}

LATIN_VOWELS = ('a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U', 'o‚Äò', 'O‚Äò')
CYRILLIC_VOWELS = ('–∞', '–ê', '–µ', '–ï', '—ë', '–Å', '–∏', '–ò', '–æ', '–û', '—É', '–£', '—ç', '–≠', '—é', '–Æ', '—è', '–Ø', '—û', '–é')

# Ruscha harflarga xos belgilar
RUSSIAN_CYRILLIC_SPECIFIC = set("—ë—ã—ç—ä—â")

# Start buyrug‚Äòi
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("Assalomu alaykum! Bu bot sizga yordam berish uchun tayyor. üòä")

# Mukammal URL regex
URL_REGEX = re.compile(
    r"(?i)(https?://|www\.)[-\w.]+\.[a-z]{2,}([:/][-a-z0-9@:%._+~#=]*)?(\?[;&a-z0-9%_=-]+)?(#[-\w]+)?"
)

def to_cyrillic(text):
    """Lotin matnni kirillchaga aylantirish"""
    compounds_first = {
        'ch': '—á', 'Ch': '–ß', 'CH': '–ß', 'sh': '—à', 'Sh': '–®', 'SH': '–®', 'yo‚Äò': '–π—û', 'Yo‚Äò': '–ô—û', 'YO‚Äò': '–ô–é'
    }
    compounds_second = {
        'yo': '—ë', 'Yo': '–Å', 'YO': '–Å', 'yu': '—é', 'Yu': '–Æ', 'YU': '–Æ', 'ya': '—è', 'Ya': '–Ø', 'YA': '–Ø',
        'ye': '–µ', 'Ye': '–ï', 'YE': '–ï', 'o‚Äò': '—û', 'O‚Äò': '–é', 'o ª': '—û', 'O ª': '–é', 'g‚Äò': '“ì', 'G‚Äò': '“í', 'g ª': '“ì', 'G ª': '“í'
    }
    beginning_rules = {'ye': '–µ', 'Ye': '–ï', 'YE': '–ï', 'e': '—ç', 'E': '–≠'}
    after_vowel_rules = {'ye': '–µ', 'Ye': '–ï', 'YE': '–ï', 'e': '—ç', 'E': '–≠'}

    text = text.replace(' ª', '‚Äò')
    
    # Harf birikmalarini almashtirish
    text = re.sub(r'(%s)' % '|'.join(compounds_first.keys()), lambda x: compounds_first[x.group(1)], text, flags=re.U)
    text = re.sub(r'(%s)' % '|'.join(compounds_second.keys()), lambda x: compounds_second[x.group(1)], text, flags=re.U)
    text = re.sub(r'\b(%s)' % '|'.join(beginning_rules.keys()), lambda x: beginning_rules[x.group(1)], text, flags=re.U)
    text = re.sub(r'(%s)(%s)' % ('|'.join(LATIN_VOWELS), '|'.join(after_vowel_rules.keys())), 
                  lambda x: '%s%s' % (x.group(1), after_vowel_rules[x.group(2)]), text, flags=re.U)
    text = re.sub(r'(%s)' % '|'.join(LATIN_TO_CYRILLIC.keys()), lambda x: LATIN_TO_CYRILLIC[x.group(1)], text, flags=re.U)
    
    return text

def is_russian_text(text):
    """
    Matnni kirillchaga aylantirib, ruscha ekanligini tekshiradi.
    Agar ruscha xos harflar (—ë, —ã, —ç, —ä, —â) bo‚Äòlsa, True qaytaradi.
    """
    # Agar matn allaqachon kirillcha bo‚Äòlsa, to‚Äòg‚Äòridan-to‚Äòg‚Äòri ishlatamiz, aks holda aylantiramiz
    cyrillic_text = text if any(c in text for c in CYRILLIC_TO_LATIN) else to_cyrillic(text)
    
    # Ruscha xos harflar mavjudligini tekshirish
    has_russian_chars = any(char in RUSSIAN_CYRILLIC_SPECIFIC for char in cyrillic_text)
    
    logging.info(f"Matn: {text}, Kirillcha: {cyrillic_text}, Ruscha harflar: {has_russian_chars}")
    return has_russian_chars

# Yangi a‚Äôzo qo‚Äòshilganda xabarni o‚Äòchirish
@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def delete_new_member_message(message: types.Message):
    if message.chat.id in GROUP_IDS:
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            logging.info(f"Yangi a‚Äôzo xabari o‚Äòchirildi: Guruh ID {message.chat.id}")
        except Exception as e:
            logging.error(f"Yangi a‚Äôzo xabarini o‚Äòchirishda xatolik: {e}, Guruh: {message.chat.id}")

# A‚Äôzo chiqib ketganda xabarni o‚Äòchirish
@dp.message_handler(content_types=types.ContentType.LEFT_CHAT_MEMBER)
async def delete_left_member_message(message: types.Message):
    if message.chat.id in GROUP_IDS:
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            logging.info(f"Chiqib ketgan a‚Äôzo xabari o‚Äòchirildi: Guruh ID {message.chat.id}")
        except Exception as e:
            logging.error(f"Chiqib ketgan a‚Äôzo xabarini o‚Äòchirishda xatolik: {e}, Guruh: {message.chat.id}")

# Oddiy xabarlar uchun handler
@dp.message_handler(lambda message: message.chat.id in GROUP_IDS)
async def delete_messages(message: types.Message):
    try:
        # Bo‚Äòsh xabar yoki maxsus eventlarni o‚Äòtkazib yuborish
        if not message.text or message.new_chat_members or message.left_chat_member:
            return

        # Admin tekshiruvi
        if message.from_user:
            user_status = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if user_status.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
                logging.info(f"Admin xabari: {message.from_user.id} - {message.text}")
                return

        # Havola tekshiruvi
        if URL_REGEX.search(message.text):
            await bot.delete_message(message.chat.id, message.message_id)
            logging.info(f"Havola o‚Äòchirildi: {message.text}, Guruh: {message.chat.id}")
            return

        # Ruscha matn tekshiruvi
        if is_russian_text(message.text):
            await bot.delete_message(message.chat.id, message.message_id)
            logging.info(f"Ruscha xabar o‚Äòchirildi: {message.text}, Guruh: {message.chat.id}")
            return

    except Exception as e:
        logging.error(f"Xatolik yuz berdi: {e}, Guruh: {message.chat.id}")

# Botni ishga tushirish
if __name__ == "__main__":
    logging.info("Bot ishga tushdi!")
    executor.start_polling(dp, skip_updates=True)
